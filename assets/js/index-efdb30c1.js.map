{"version":3,"file":"index-efdb30c1.js","sources":["../../../vite/modulepreload-polyfill","../../../react/jsx-runtime","../../../src/components/task-list/TaskList.tsx","../../../node_modules/.pnpm/react-hook-form@7.28.1_react@17.0.2/node_modules/react-hook-form/dist/index.esm.mjs","../../../src/components/task-creation/TaskCreation.tsx","../../../src/App.tsx","../../../src/main.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import * as jsxRuntime from \"/home/runner/work/react-tasklist/react-tasklist/node_modules/react/jsx-runtime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import { useContext } from 'react';\n\nimport { TasksContext } from 'App';\n\nexport const TaskList = () => {\n  const [tasks, _setTasks] = useContext(TasksContext);\n\n  return (\n    <>\n      <h1>Task List</h1>\n\n      {tasks.map(({ id, title, priority }) => (\n        <div key={id}>\n          <h2>{title}</h2>\n          <p>{priority}</p>\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some((current) => getNodeParentName(name) === current);\n\nvar compact = (value) => value.filter(Boolean);\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nvar omit = (source, key) => {\r\n    const copy = Object.assign({}, source);\r\n    delete copy[key];\r\n    return copy;\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => (React.createElement(HookFormContext.Provider, { value: omit(props, 'children') }, props.children));\n\nvar getProxyFormState = (formState, _proxyFormState, localProxyFormState, isRoot = true) => {\r\n    const result = {};\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const formState = omit(formStateData, 'name');\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const tearDown = (subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        };\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => tearDown(subscription);\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    const _mounted = React.useRef(true);\r\n    _name.current = name;\r\n    const callback = React.useCallback((value) => _mounted.current &&\r\n        shouldSubscribeByName(_name.current, value.name, exact) &&\r\n        shouldRenderFormState(value, _localProxyFormState.current) &&\r\n        updateFormState(Object.assign(Object.assign({}, control._formState), value)), [control, exact]);\r\n    useSubscribe({\r\n        disabled,\r\n        callback,\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => () => {\r\n        _mounted.current = false;\r\n    }, []);\r\n    return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    const isArray = Array.isArray(names);\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (isArray) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    const callback = React.useCallback((formState) => {\r\n        if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n            const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n            updateValue(isUndefined(_name.current) ||\r\n                (isObject(fieldValues) && !objectHasFunction(fieldValues))\r\n                ? Object.assign({}, fieldValues) : Array.isArray(fieldValues)\r\n                ? [...fieldValues]\r\n                : isUndefined(fieldValues)\r\n                    ? defaultValue\r\n                    : fieldValues);\r\n        }\r\n    }, [control, exact, defaultValue]);\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback,\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => {\r\n        control._removeUnmounted();\r\n    });\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, Object.assign(Object.assign({}, props.rules), { value })));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => {\r\n                _registerProps.current.onChange({\r\n                    target: {\r\n                        value: getEventValue(event),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.CHANGE,\r\n                });\r\n            }, [name]),\r\n            onBlur: React.useCallback(() => {\r\n                _registerProps.current.onBlur({\r\n                    target: {\r\n                        value: get(control._formValues, name),\r\n                        name: name,\r\n                    },\r\n                    type: EVENTS.BLUR,\r\n                });\r\n            }, [name, control]),\r\n            ref: React.useCallback((elm) => {\r\n                const field = get(control._fields, name);\r\n                if (elm && field && elm.focus) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            }, [name, control._fields]),\r\n        },\r\n        formState,\r\n        fieldState: control.getFieldState(name, formState),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const _f = field._f;\r\n            const current = omit(field, '_f');\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus && isUndefined(_f.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (_f.refs) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(current)) {\r\n                focusFieldBy(current, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (isArray || isObject(data)) {\r\n        copy = isArray ? [] : {};\r\n        for (const key in data) {\r\n            if (isFunction(data[key])) {\r\n                copy = data;\r\n                break;\r\n            }\r\n            copy[key] = cloneObject(data[key]);\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current, []);\r\n            setFields(fieldValues);\r\n            ids.current = fieldValues.map(generateId);\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current) {\r\n            control._executeSchema([name]).then((result) => {\r\n                const error = get(result.errors, name);\r\n                if (error && error.type && !get(control._formState.errors, name)) {\r\n                    set(control._formState.errors, name, error);\r\n                    control._subjects.state.next({\r\n                        errors: control._formState.errors,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => key.startsWith(control._names.focus));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => (Object.assign(Object.assign({}, field), { [keyName]: ids.current[index] || generateId() }))), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => !isUndefined(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : Object.assign({}, markFieldsDirty(data[key]));\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : +value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? undefined\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, appendErrorsCurry(exceedMax ? maxType : minType, message));\r\n    };\r\n    if (required &&\r\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n            (isBoolean(inputValue) && !inputValue) ||\r\n            (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n            (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: inputRef }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber || +inputValue;\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: inputRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = Object.assign(Object.assign({}, defaultOptions), props);\r\n    let _formState = {\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = _options.defaultValues || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback, wait) => (...args) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(() => callback(...args), wait);\r\n    };\r\n    const _updateValid = async (shouldSkipRender) => {\r\n        let isValid = false;\r\n        if (_proxyFormState.isValid) {\r\n            isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : await executeBuildInValidation(_fields, true);\r\n            if (!shouldSkipRender && isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n        return isValid;\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (_proxyFormState.errors &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => (set(_formState.errors, name, error),\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        }));\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let isFieldDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n        if (_proxyFormState.isDirty) {\r\n            const isPreviousFormDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            isFieldDirty = isPreviousFormDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            const isPreviousFieldDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    isPreviousFieldDirty !== get(_formState.dirtyFields, name);\r\n        }\r\n        if (isBlurEvent && !isPreviousFieldTouched) {\r\n            set(_formState.touchedFields, name, isBlurEvent);\r\n            output.touchedFields = _formState.touchedFields;\r\n            isFieldDirty =\r\n                isFieldDirty ||\r\n                    (_proxyFormState.touchedFields &&\r\n                        isPreviousFieldTouched !== isBlurEvent);\r\n        }\r\n        isFieldDirty && shouldRender && _subjects.state.next(output);\r\n        return isFieldDirty ? output : {};\r\n    };\r\n    const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback =\r\n                delayErrorCallback || debounce(updateErrors, props.delayError);\r\n            delayErrorCallback(name, error);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) &&\r\n            !shouldSkipRender) {\r\n            const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), (shouldUpdateValid ? { isValid } : {})), { errors: _formState.errors, name });\r\n            _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => _options.resolver\r\n        ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation))\r\n        : {};\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuildInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const fieldReference = field._f;\r\n                const fieldValue = omit(field, '_f');\r\n                if (fieldReference) {\r\n                    const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\r\n                    if (fieldError[fieldReference.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!shouldOnlyCheckValid) {\r\n                        fieldError[fieldReference.name]\r\n                            ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name])\r\n                            : unset(_formState.errors, fieldReference.name);\r\n                    }\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => {\r\n        const fieldValues = Object.assign({}, (_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue));\r\n        return generateWatchOutput(names, _names, fieldValues, isGlobal);\r\n    };\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((selectRef) => (selectRef.selected = fieldValue.includes(selectRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => !checkboxRef.disabled &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                return (shouldRender &&\r\n                    _subjects.state.next(Object.assign({ name }, (watched ? {} : fieldState))));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name] ? +1 : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                isValid = await _updateValid(true);\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(false, name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuildInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuildInValidation(_fields);\r\n        }\r\n        _subjects.state.next(Object.assign(Object.assign(Object.assign({}, (!isString(name) ||\r\n            (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n            ? {}\r\n            : { name })), (_options.resolver ? { isValid } : {})), { errors: _formState.errors, isValidating: false }));\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = Object.assign(Object.assign({}, _defaultValues), (_stateFlags.mount ? _formValues : {}));\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (info) => name(_getWatch(undefined, defaultValue), info),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next(Object.assign(Object.assign({}, _formState), (!options.keepDirty ? {} : { isDirty: _getDirty() })));\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            _f: Object.assign(Object.assign(Object.assign({}, (field && field._f ? field._f : { ref: { name } })), { name, mount: true }), options),\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return Object.assign(Object.assign(Object.assign({}, (disabledIsDefined ? { disabled: options.disabled } : {})), (_options.shouldUseNativeValidation\r\n            ? {\r\n                required: !!options.required,\r\n                min: getRuleValue(options.min),\r\n                max: getRuleValue(options.max),\r\n                minLength: getRuleValue(options.minLength),\r\n                maxLength: getRuleValue(options.maxLength),\r\n                pattern: getRuleValue(options.pattern),\r\n            }\r\n            : {})), { name,\r\n            onChange, onBlur: onChange, ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: Object.assign(Object.assign({}, field._f), (radioOrCheckbox\r\n                            ? {\r\n                                refs: [...refs.filter(live), fieldRef],\r\n                                ref: { type: fieldRef.type, name },\r\n                            }\r\n                            : { ref: fieldRef })),\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            } });\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuildInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors) &&\r\n                Object.keys(_formState.errors).every((name) => get(fieldValues, name))) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid(Object.assign({}, _formState.errors), e);\r\n                }\r\n                _options.shouldFocusError &&\r\n                    focusFieldBy(_fields, (key) => get(_formState.errors, key), _names.mount);\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next(Object.assign({}, _formState));\r\n        }\r\n    };\r\n    const reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (isWeb && isUndefined(formValues)) {\r\n                for (const name of _names.mount) {\r\n                    const field = get(_fields, name);\r\n                    if (field && field._f) {\r\n                        const fieldReference = Array.isArray(field._f.refs)\r\n                            ? field._f.refs[0]\r\n                            : field._f.ref;\r\n                        try {\r\n                            isHTMLElement(fieldReference) &&\r\n                                fieldReference.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _fields = {};\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty\r\n                ? _formState.isDirty\r\n                : keepStateOptions.keepDefaultValues\r\n                    ? !deepEqual(formValues, _defaultValues)\r\n                    : false,\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty\r\n                ? _formState.dirtyFields\r\n                : (keepStateOptions.keepDefaultValues && formValues\r\n                    ? Object.entries(formValues).reduce((previous, [key, value]) => (Object.assign(Object.assign({}, previous), { [key]: value !== get(_defaultValues, key) })), {})\r\n                    : {}),\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors\r\n                ? _formState.errors\r\n                : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name)._f;\r\n        const fieldRef = field.refs ? field.refs[0] : field.ref;\r\n        options.shouldSelect ? fieldRef.select() : fieldRef.focus();\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = Object.assign(Object.assign({}, _options), value);\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to mange the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touchedFields: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        errors: {},\r\n    });\r\n    if (_formControl.current) {\r\n        _formControl.current.control._options = props;\r\n    }\r\n    else {\r\n        _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), { formState });\r\n    }\r\n    const control = _formControl.current.control;\r\n    const callback = React.useCallback((value) => {\r\n        if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n            control._formState = Object.assign(Object.assign({}, control._formState), value);\r\n            updateFormState(Object.assign({}, control._formState));\r\n        }\r\n    }, [control]);\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback,\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { useContext } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { TasksContext } from 'App';\n\ninterface FormFields {\n  title: string;\n  priority: 'low' | 'normal' | 'high';\n}\n\nexport const TaskCreation = () => {\n  const [_tasks, setTasks] = useContext(TasksContext);\n  const {\n    register,\n    reset,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormFields>();\n\n  const onSubmit = handleSubmit(({ title, priority }) => {\n    setTasks((tasks) => {\n      const id = tasks\n        .map((task) => task.id)\n        .reduce((maxId, currentId) => Math.max(maxId, currentId + 1));\n      return [...tasks, { id, title, priority }];\n    });\n\n    reset();\n  });\n\n  return (\n    <>\n      <h1>Task Creation</h1>\n\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor=\"title\">Task Title: </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            {...register('title', { required: true })}\n          />\n          {errors.title?.type === 'required' && (\n            <span> The task title is required!</span>\n          )}\n        </div>\n\n        <div>\n          <label htmlFor=\"priority\">Task Priority: </label>\n          <select\n            id=\"priority\"\n            defaultValue=\"\"\n            {...register('priority', { required: true })}\n          >\n            <option value=\"\" disabled hidden>\n              --Please select a priority--\n            </option>\n            <option value=\"low\">Low</option>\n            <option value=\"normal\">Normal</option>\n            <option value=\"high\">High</option>\n          </select>\n          {errors.priority?.type === 'required' && (\n            <span> The task priority is required!</span>\n          )}\n        </div>\n\n        <button type=\"submit\">Create</button>\n      </form>\n    </>\n  );\n};\n","import { createContext, useState } from 'react';\n\nimport { TaskCreation, TaskList } from 'components';\nimport type { ITask, StateFrom } from 'types';\n\nexport const TasksContext = createContext<StateFrom<ITask[]>>([[], () => {}]);\n\nexport const App = () => {\n  const [tasks, setTasks] = useState<ITask[]>([\n    { id: 1, title: 'Task 1', priority: 'high' },\n    { id: 2, title: 'Task 2', priority: 'normal' },\n  ]);\n\n  return (\n    <TasksContext.Provider value={[tasks, setTasks]}>\n      <TaskCreation />\n      <TaskList />\n    </TasksContext.Provider>\n  );\n};\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from './App';\n\nconst root = document.getElementById('root');\nif (root) {\n  render(\n    <StrictMode>\n      <App />\n    </StrictMode>,\n    root,\n  );\n} else {\n  // eslint-disable-next-line no-console\n  console.error('There is no #root element in the dom');\n}\n"],"names":["jsxRuntime.jsx","jsxRuntime.jsxs","jsxRuntime.Fragment","TaskList","tasks","_setTasks","useContext","TasksContext","_Fragment","_jsx","map","id","title","priority","TaskCreation","_tasks","setTasks","register","reset","handleSubmit","formState","errors","useForm","onSubmit","task","reduce","maxId","currentId","Math","max","_jsxs","required","type","createContext","App","useState","root","document","getElementById","render","StrictMode","console","error"],"mappings":"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"}